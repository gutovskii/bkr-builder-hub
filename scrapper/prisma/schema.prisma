//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ComponentsFilters {
  id            String @id() @default(uuid())
  componentType String @unique()
  filters       Json
}

model UserEntity {
  id              String          @id() @default(uuid())
  nickname        String          @unique()
  email           String          @unique()
  isAdmin         Boolean         @default(false)
  savedComponents BaseComponent[]
  savedBuilds     BuildEntity[]
  buildComments   BuildComment[]
}

model BuildComment {
  id      String      @id() @default(uuid())
  text    String
  rating  Float
  user    UserEntity  @relation(fields: [userId], references: [id])
  userId  String
  build   BuildEntity @relation(fields: [buildId], references: [id])
  buildId String
}

model BuildEntity {
  id            String                 @id() @default(uuid())
  name          String
  rating        Float                  @default(0)
  likes         Int                    @default(0)
  user          UserEntity             @relation(fields: [userId], references: [id])
  userId        String
  motherBoard   MotherboardComponent?  @relation(fields: [motherBoardId], references: [id])
  motherBoardId String?
  cpu           CpuComponent?          @relation(fields: [cpuId], references: [id])
  cpuId         String?
  ssds          SsdComponent[]
  hdds          HddComponent[]
  memories      MemoryComponent[]
  videoCards    VideoCardComponent[]
  coolers       CoolerComponent[]
  powerSupplies PowerSupplyComponent[]
  cases         CaseComponent[]
  buildComments BuildComment[]
}

model ComponentInMarketplaces {
  id                   String         @id() @default(uuid())
  name                 String
  marketplaceName      String
  price                Int?
  rating               Float?
  warranty             String?
  URL                  String
  componentUnifiedName String
  createdAt            DateTime       @default(now()) @db.Timestamptz()
  unifiedComponent     BaseComponent? @relation(fields: [unifiedComponentId], references: [id], onDelete: Cascade)
  unifiedComponentId   String?

  @@index([componentUnifiedName])
}

model ArchivedComponentInMarketplaces {
  id                   String   @id() @default(uuid())
  marketplaceName      String
  price                Int?
  rating               Float?
  warranty             String?
  URL                  String
  componentUnifiedName String
  createdAt            DateTime @default(now()) @db.Timestamptz()

  @@index([componentUnifiedName])
}

model BaseComponent {
  id                                String                    @id() @default(uuid())
  componentUnifiedName              String                    @unique()
  componentType                     String
  lowestPrice                       Int?
  highestRating                     Float                     @default(0)
  warranty                          String?
  imgUrls                           String[]
  isNotAvailableCandidate           Boolean                   @default(false)
  isNotAvailable                    Boolean                   @default(false)
  updatedAt                         DateTime                  @default(now()) @updatedAt() @db.Timestamptz()
  jsonCharacteristics               Json
  marketplacesComponents            ComponentInMarketplaces[]
  users                             UserEntity[]
  delegate_aux_caseComponent        CaseComponent?
  delegate_aux_coolerComponent      CoolerComponent?
  delegate_aux_cpuComponent         CpuComponent?
  delegate_aux_hddComponent         HddComponent?
  delegate_aux_memoryComponent      MemoryComponent?
  delegate_aux_motherboardComponent MotherboardComponent?
  delegate_aux_powerSupplyComponent PowerSupplyComponent?
  delegate_aux_ssdComponent         SsdComponent?
  delegate_aux_videoCardComponent   VideoCardComponent?

  @@index([componentUnifiedName])
}

model CaseComponent {
  id                         String        @id()
  manufacturer               String?
  maxVideoCardLength         String?
  motherBoardFormFactors     String?
  physicalDimensions         String?
  maxCoolerHeight            String?
  expansionSlots             String?
  caseType                   String?
  material                   String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CoolerComponent {
  id                         String        @id()
  manufacturer               String?
  sizes                      String?
  weight                     String?
  maxNoiseLevel              String?
  socket                     String?
  tdp                        String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CpuComponent {
  id                         String        @id()
  manufacturer               String?
  series                     String?
  processorGeneration        String?
  socket                     String?
  coreCount                  String?
  threadCount                String?
  tpd                        String?
  maxSupportedMemory         String?
  lithografy                 String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model HddComponent {
  id                         String        @id()
  manufacturer               String?
  serias                     String?
  formFactor                 String?
  maxRotationSpeed           String?
  weight                     String?
  physicalDimensions         String?
  noiseLevel                 String?
  compatability              String?
  connectionInterface        String?
  writingTechnology          String?
  volume                     String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MemoryComponent {
  id                         String        @id()
  manufacturer               String?
  memoryType                 String?
  memoryFrequence            String?
  volume                     String?
  numberOfSlots              String?
  timingsSchema              String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MotherboardComponent {
  id                         String        @id()
  manufacturer               String?
  socket                     String?
  formFactor                 String?
  chipset                    String?
  memoryType                 String?
  memoryMax                  String?
  memorySlots                String?
  physicalDimensions         String?
  maxFrequencyOfRAM          String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PowerSupplyComponent {
  id                         String        @id()
  manufacturer               String?
  formFactor                 String?
  weight                     String?
  power                      String?
  physicalDimensions         String?
  specification              String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SsdComponent {
  id                         String        @id()
  manufacturer               String?
  volume                     String?
  serias                     String?
  readingSpeed               String?
  writingSpeed               String?
  connectionInterface        String?
  physicalDimensions         String?
  formFactor                 String?
  weight                     String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VideoCardComponent {
  id                         String        @id()
  manufacturer               String?
  volume                     String?
  memoryType                 String?
  chipset                    String?
  connectionInterface        String?
  bitCapacityOfTheMemoryBus  String?
  memoryFrequency            String?
  coreFrequency              String?
  connectors                 String?
  builds                     BuildEntity[]
  delegate_aux_baseComponent BaseComponent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
